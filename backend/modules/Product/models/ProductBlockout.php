<?php

namespace backend\modules\Product\models;

use backend\modules\MadActiveRecord\models\MadActiveRecord;
use backend\modules\Modmail\models\Modmail;
use Yii;
use yii\db\ActiveRecord;

/**
 * Default model for the `Product` module
 */
class ProductBlockout extends MadActiveRecord{

    public static function tableName()
    {
        return 'modulusProductBlockouts';
    }

    public function rules()
    {
        return [

            [['dates', 'product_id'], 'required'],

            [['product_id'], 'integer'],

            [['start_date','end_date'], 'date', 'format' => 'php:Y-m-d'],

            [['dates'], 'string', 'max' => 8000],

            //['start_date','validateDates'],

        ];
    }

    public function attributeLabels()

    {

        return [

            'id' => Yii::t('app', 'ID'),

            'start_date' => Yii::t('app', 'Kezdő dátum'),

            'end_date' => Yii::t('app', 'Befejező dátum'),

            'dates' => Yii::t('app', 'Days to Block'),

            'product_id' => Yii::t('app', 'ProductId'),

        ];

    }

    public function init() {
        parent::init();



        return true;
    }
    public function initTime(){
        if($this->start_date=='' || is_null($this->start_date) || $this->start_date=='0000-00-00'){
            $this->start_date=date('Y-m-d');
            //\backend\components\extra::e($this);
        }
        return $this;

    }

    public function getProduct()
    {
        return $this->hasOne(Product::class, ['id' => 'product_id']);
    }

    public function afterFind() {
        parent::afterFind();

        if($this->start_date=='' || is_null($this->start_date) || $this->start_date=='0000-00-00'){
            $this->start_date=date('Y-m-d');
        }

        if($this->end_date=='' || is_null($this->end_date) || $this->end_date=='0000-00-00'){
            $this->end_date=date('Y-m-d');
        }

        return true;
    }

    public function afterSave($insert, $changedAttributes)
    {


        /**
         * Let's send E mail notification
         *
         */
        $currentUser=Yii::$app->user->identity->username;
        $model=new Modmail();



        $values=[
            'from '=> 'info@budapestrivercruise.co.uk',
            'to '=> 'orban9408@gmail.com',
            'subject '=> 'New timeBlock on '.$_SERVER['HTTP_HOST'].' '.date('Y-m-d h:i').' by '.$currentUser,
            'date'=>date('Y-m-d h:i'),
            'type'=>'new timeBlock',
            'status'=>'sent'

        ];




        $bootstrap='<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">';
        $bootstrap.='<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" >';

        include_once('./VvvebJs/mail-templates/newblock.php');
        $txt = $bootstrap.$newblockHTML; //this is from
        //the 2 above go together

        $model->body=$txt;
        $headers = "From: $model->from" . "\r\n";
        $headers .= "MIME-Version: 1.0\r\n";
        $headers .= "Content-Type: text/html; charset=ISO-8859-1\r\n";

        if(mail($values['to'],$values['subject'],$values['body'],$headers)){
            Modmail::insertOne($model,$values);
        }


        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

}
