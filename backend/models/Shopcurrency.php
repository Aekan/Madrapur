<?phpnamespace backend\models;use Yii;use backend\components\Controller;use yii\helpers\ArrayHelper;/** * This is the model class for table "shop_currency". * * @property integer $id * @property string $name * @property string $sort_name * @property string $before_sign * @property string $after_sign * @property double $value * @property integer $decimals * @property integer $status * @property integer $sort_order */class Shopcurrency extends \yii\db\ActiveRecord{    const STATUS_ACTIVE=1;    const STATUS_INACTIVE=0;    private static $_currentCurrency;    private static $_lastCurrency;    public static function status($n=false)    {        $tt = [            1 => Yii::t('app', 'aktív'),            0 => Yii::t('app', 'inaktív'),        ];        return ($n===false)? $tt : $tt[$n];    }    /**     * @inheritdoc     */    public static function tableName()    {        return 'shop_currency';    }    /**     * @inheritdoc     */    public function rules()    {        return [            [['name', 'sort_name', 'value', 'decimals', 'status', 'sort_order'], 'required'],            [['value','value_selling'], 'number'],            [['decimals', 'status', 'sort_order'], 'integer'],            [['name'], 'string', 'max' => 40],            [['sort_name', 'before_sign', 'after_sign'], 'string', 'max' => 10]        ];    }    /**     * @inheritdoc     */    public function attributeLabels()    {        return [            'id' => Yii::t('app', 'ID'),            'name' => Yii::t('app', 'Valuta neve'),            'sort_name' => Yii::t('app', 'Valuta rövid neve'),            'before_sign' => Yii::t('app', 'Összeg előtti jel'),            'after_sign' => Yii::t('app', 'Összeg utáni jel'),            'value' => Yii::t('app', 'Valuta értéke (vétel)'),            'value_selling' => Yii::t('app', 'Valuta értéke (eladás)'),            'decimals' => Yii::t('app', 'Tizedesjegyek száma'),            'status' => Yii::t('app', 'Állapota'),            'sort_order' => Yii::t('app', 'Sorrendje'),        ];    }    public static function getAvaibleCurrencies()    {    	return self::find()->where('status='.self::STATUS_ACTIVE)->orderBy('sort_order')->all();    }    public static function getAvaibleTodropdown()    {    	return ArrayHelper::map(self::find()->where('status='.self::STATUS_ACTIVE)->orderBy('sort_order')->all(),'sort_name','sort_name');    }    public static function getDafaultCurreny()    {    	return self::find()->where('status='.self::STATUS_ACTIVE)->orderBy('sort_order')->one();    }    public static function loadCurrency($cur = false)    {    	if(!$cur)            $cur = Controller::$currency;            if($cur) {                self::$_currentCurrency = self::find()->where(['sort_name'=>$cur])->one();                if(self::$_currentCurrency === null)                    self::$_currentCurrency = self::find()->where(['sort_name'=>$cur])->orderBy('sort_order')->one();                elseif(self::$_currentCurrency->status != self::STATUS_ACTIVE)                    self::$_currentCurrency = self::find()->where(['sort_name'=>$cur])->orderBy('sort_order')->one();            } else                self::$_currentCurrency = self::find()->where(['sort_name'=>$cur])->orderBy('sort_order')->one();    	return true;    }    public static function getBeforeSign()    {    	if(!self::$_currentCurrency)    		self::loadCurrency();    	return self::$_currentCurrency->before_sign;    }    public static function getAfterSign()    {    	if(!self::$_currentCurrency)    		self::loadCurrency();    	return self::$_currentCurrency->after_sign;    }    public static function getDecimals()    {    	if(!self::$_currentCurrency)    		self::loadCurrency();    	return self::$_currentCurrency->decimals;    }    public static function getCurrencyValue()    {    	if(!self::$_currentCurrency)    		self::loadCurrency();    	return self::$_currentCurrency->value;    }    public static function priceFormat($price) {    	$before = self::getBeforeSign();    	$after = self::getAfterSign();    	$decimals = self::getDecimals();    	//$value = self::getCurrencyValue();    	$beforeT = (!empty($before))? '<span class="currency before">' .$before. '</span>' : '';    	$afterT = (!empty($after))? '<span class="currency after">' .$after. '</span>': '';    	$displayPrice = $price;// / $value;    	return $beforeT.number_format($displayPrice, $decimals, '.', ' ').$afterT;    }    public static function priceFormatByCurrency($price,$currency) {        $currency = self::find()->where(['sort_name'=>$currency])->one();    	$before = $currency->before_sign;    	$after = $currency->after_sign;    	$decimals = $currency->decimals;    	//$value = self::getCurrencyValue();    	$beforeT = (!empty($before))? '<span class="currency before">' .$before. '</span>' : '';    	$afterT = (!empty($after))? '<span class="currency after">' .$after. '</span>': '';    	return $beforeT.number_format($price, $decimals, '.', ' ').$afterT;    }    public static function valueBycurrency($value,$cur,$currentcur='')    {        if($currentcur=='') $currentcur=Controller::$currency;        if($cur!=$currentcur)        {            $cur=self::find()->where(['sort_name'=>$cur])->one();            $currentcur=self::find()->where(['sort_name'=>$currentcur])->one();            if(!empty($cur) && !empty($currentcur)) {                return (($value*$cur->value_selling)/$currentcur->value);            }        }        return $value;    }}